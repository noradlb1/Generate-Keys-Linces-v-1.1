<?xml version="1.0"?>
<doc>
<assembly>
<name>
Uacoder-Trial
</name>
</assembly>
<members>
<member name="P:Uacoder_Trial.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Uacoder_Trial.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Uacoder_Trial.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="F:Uacoder_Trial.Encryption.Symmetric.Provider.DES">
	<summary>
 The Data Encryption Standard provider supports a 64 bit key only
 </summary>
</member><member name="F:Uacoder_Trial.Encryption.Symmetric.Provider.RC2">
	<summary>
 The Rivest Cipher 2 provider supports keys ranging from 40 to 128 bits, default is 128 bits
 </summary>
</member><member name="F:Uacoder_Trial.Encryption.Symmetric.Provider.Rijndael">
	<summary>
 The Rijndael (also known as AES) provider supports keys of 128, 192, or 256 bits with a default of 256 bits
 </summary>
</member><member name="F:Uacoder_Trial.Encryption.Symmetric.Provider.TripleDES">
	<summary>
 The TripleDES provider (also known as 3DES) supports keys of 128 or 192 bits with a default of 192 bits
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.#ctor(Uacoder_Trial.Encryption.Symmetric.Provider,System.Boolean)">
	<summary>
 Instantiates a new symmetric encryption object using the specified provider.
 </summary>
</member><member name="P:Uacoder_Trial.Encryption.Symmetric.Key">
	<summary>
 The key used to encrypt/decrypt data
 </summary>
</member><member name="P:Uacoder_Trial.Encryption.Symmetric.IntializationVector">
	<summary>
 Using the default Cipher Block Chaining (CBC) mode, all data blocks are processed using
 the value derived from the previous block; the first data block has no previous data block
 to use, so it needs an InitializationVector to feed the first block
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.RandomInitializationVector">
	<summary>
 generates a random Initialization Vector, if one was not provided
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.RandomKey">
	<summary>
 generates a random Key, if one was not provided
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.ValidateKeyAndIv(System.Boolean)">
	<summary>
 Ensures that _crypto object has valid Key and IV
 prior to any attempt to encrypt/decrypt anything
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.Encrypt(Uacoder_Trial.Encryption.Data,Uacoder_Trial.Encryption.Data)">
	<summary>
 Encrypts the specified Data using provided key
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.Encrypt(Uacoder_Trial.Encryption.Data)">
	<summary>
 Encrypts the specified Data using preset key and preset initialization vector
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.Encrypt(System.IO.Stream,Uacoder_Trial.Encryption.Data,Uacoder_Trial.Encryption.Data)">
	<summary>
 Encrypts the stream to memory using provided key and provided initialization vector
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.Encrypt(System.IO.Stream,Uacoder_Trial.Encryption.Data)">
	<summary>
 Encrypts the stream to memory using specified key
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.Encrypt(System.IO.Stream)">
	<summary>
 Encrypts the specified stream to memory using preset key and preset initialization vector
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.Decrypt(Uacoder_Trial.Encryption.Data,Uacoder_Trial.Encryption.Data)">
	<summary>
 Decrypts the specified data using provided key and preset initialization vector
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.Decrypt(System.IO.Stream,Uacoder_Trial.Encryption.Data)">
	<summary>
 Decrypts the specified stream using provided key and preset initialization vector
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.Decrypt(System.IO.Stream)">
	<summary>
 Decrypts the specified stream using preset key and preset initialization vector
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Symmetric.Decrypt(Uacoder_Trial.Encryption.Data)">
	<summary>
 Decrypts the specified data using preset key and preset initialization vector
 </summary>
</member><member name="T:Uacoder_Trial.Encryption.Symmetric">
	<summary>
 Symmetric encryption uses a single key to encrypt and decrypt. 
 Both parties (encryptor and decryptor) must share the same secret key.
 </summary>
</member><member name="F:Uacoder_Trial.Encryption.Data.DefaultEncoding">
	<summary>
 Determines the default text encoding across ALL Data instances
 </summary>
</member><member name="F:Uacoder_Trial.Encryption.Data.Encoding">
	<summary>
 Determines the default text encoding for this Data instance
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Data.#ctor">
	<summary>
 Creates new, empty encryption data
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Data.#ctor(System.Byte[])">
	<summary>
 Creates new encryption data with the specified byte array
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Data.#ctor(System.String)">
	<summary>
 Creates new encryption data with the specified string; 
 will be converted to byte array using default encoding
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Data.#ctor(System.String,System.Text.Encoding)">
	<summary>
 Creates new encryption data using the specified string and the 
 specified encoding to convert the string to a byte array.
 </summary>
</member><member name="P:Uacoder_Trial.Encryption.Data.IsEmpty">
	<summary>
 returns true if no data is present
 </summary>
</member><member name="P:Uacoder_Trial.Encryption.Data.StepBytes">
	<summary>
 allowed step interval, in bytes, for this data; if 0, no limit
 </summary>
</member><member name="P:Uacoder_Trial.Encryption.Data.MinBytes">
	<summary>
 minimum number of bytes allowed for this data; if 0, no limit
 </summary>
</member><member name="P:Uacoder_Trial.Encryption.Data.MaxBytes">
	<summary>
 maximum number of bytes allowed for this data; if 0, no limit
 </summary>
</member><member name="P:Uacoder_Trial.Encryption.Data.Bytes">
	<summary>
 Returns the byte representation of the data; 
 This will be padded to MinBytes and trimmed to MaxBytes as necessary!
 </summary>
</member><member name="P:Uacoder_Trial.Encryption.Data.Text">
	<summary>
 Sets or returns text representation of bytes using the default text encoding
 </summary>
</member><member name="P:Uacoder_Trial.Encryption.Data.Hex">
	<summary>
 Sets or returns Hex string representation of this data
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Data.ToHex">
	<summary>
 returns Hex string representation of this data
 </summary>
</member><member name="T:Uacoder_Trial.Encryption.Data">
	<summary>
 represents Hex, Byte, Base64, or String data to encrypt/decrypt;
 use the .Text property to set/get a string representation 
 use the .Hex property to set/get a string-based Hexadecimal representation 
 use the .Base64 to set/get a string-based Base64 representation 
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Utils.ToHex(System.Byte[])">
	<summary>
 converts an array of bytes to a string Hex representation
 </summary>
</member><member name="M:Uacoder_Trial.Encryption.Utils.FromHex(System.String)">
	<summary>
 converts from a string Hex representation to an array of bytes
 </summary>
</member><member name="T:Uacoder_Trial.Encryption.Utils">
	<summary>
 Friend class for shared utility methods used by multiple Encryption classes
 </summary>
</member>
</members>
</doc>